import type { ServerBuild } from '@remix-run/cloudflare';
import { createPagesFunctionHandler } from '@remix-run/cloudflare-pages';
import { logAccess, processQueryParams } from '../app/utils/access-log';

// @ts-ignore because the server build file is generated by `remix vite:build`
import * as serverBuild from '../build/server';

/*
 * Create the base handler
 */
const baseHandler = createPagesFunctionHandler({
  build: serverBuild as unknown as ServerBuild,
});

// Wrap with access logging
export const onRequest = async (context: any) => {
  const startTime = Date.now();
  const { request } = context;

  /*
   * Environment variables - Cloudflare Pages Functions use context.env directly
   */
  const env = { ...process.env, ...context.env } as Env;

  // Collect request information
  const url = new URL(request.url);
  const method = request.method;
  const path = url.pathname;
  const query = processQueryParams(url.search);
  const userAgent = request.headers.get('User-Agent');
  const ip =
    request.headers.get('CF-Connecting-IP') ||
    request.headers.get('X-Forwarded-For') ||
    request.headers.get('X-Real-IP') ||
    context.request?.cf?.colo || // Cloudflare colo info
    'unknown';

  let response: Response;
  let statusCode = 200;

  try {
    // Execute the actual handler
    response = await baseHandler(context);
    statusCode = response.status;
  } catch (error) {
    statusCode = 500;
    console.error('Handler error:', error instanceof Error ? error.message : 'Unknown error');

    // Return appropriate response even when error occurs
    response = new Response('Internal Server Error', { status: 500 });
  }

  // Calculate response time
  const responseTime = Date.now() - startTime;

  /*
   * Log access request (Production environment) - within Request Context
   * Must await to ensure BigQuery logging works in Cloudflare Pages Functions
   */
  try {
    await logAccess(
      {
        method,
        path,
        query,
        statusCode,
        responseTime,
        ip,
        userAgent: userAgent || 'unknown',
        serviceName: 'agent8',
      },
      env,
    );
  } catch (error) {
    console.error('Access logging failed:', error instanceof Error ? error.message : 'Unknown error');
  }

  return response;
};
