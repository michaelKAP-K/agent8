import type { ServerBuild } from '@remix-run/cloudflare';
import { createPagesFunctionHandler } from '@remix-run/cloudflare-pages';
import { logAccess } from '../app/utils/access-log';

// @ts-ignore because the server build file is generated by `remix vite:build`
import * as serverBuild from '../build/server';

/*
 * Create the base handler
 */
const baseHandler = createPagesFunctionHandler({
  build: serverBuild as unknown as ServerBuild,
});

// Wrap with access logging (Optimized for performance)
export const onRequest = async (context: any) => {
  const startTime = Date.now();
  const { request } = context;

  // Minimal request information collection
  const url = new URL(request.url);
  const method = request.method;
  const path = url.pathname;
  const userAgent = request.headers.get('User-Agent');
  const ip =
    request.headers.get('CF-Connecting-IP') ||
    request.headers.get('X-Forwarded-For') ||
    request.headers.get('X-Real-IP') ||
    'unknown';

  // Get or generate request ID
  const requestId =
    request.headers.get('CF-Ray') ||
    request.headers.get('CF-Request-ID') ||
    request.headers.get('X-Request-ID') ||
    crypto.randomUUID();

  let response: Response;
  let statusCode = 200;

  try {
    // Execute the actual handler
    response = await baseHandler(context);
    statusCode = response.status;
  } catch (error) {
    statusCode = 500;
    console.error('Handler error:', error instanceof Error ? error.message : 'Unknown error');
    response = new Response('Internal Server Error', { status: 500 });
  }

  // Calculate response time
  const responseTime = Date.now() - startTime;

  // Determine service name from Cloudflare Pages deployment or fallback to 'agent8'
  const getServiceName = (): string => {
    if (context.env?.CF_PAGES_URL) {
      try {
        const pagesUrl = new URL(context.env.CF_PAGES_URL);
        const hostname = pagesUrl.hostname;

        if (hostname.endsWith('.pages.dev')) {
          const withoutPagesDev = hostname.split('.pages.dev')[0];
          const parts = withoutPagesDev.split('.');

          // If there are multiple parts (deployment-id.project-name), take the last part
          return parts.length > 1 ? parts[parts.length - 1] : parts[0];
        }
      } catch {
        // Ignore parsing errors and fall back to default
      }
    }

    return 'agent8';
  };

  // Fast and reliable logging with HTTP fetch to Durable Object
  await logAccess(
    {
      method,
      path,
      query: url.search || null,
      statusCode,
      responseTime,
      ip,
      userAgent: userAgent || 'unknown',
      serviceName: getServiceName(),
      requestId,
    },
    context.env,
  ).catch((error) => {
    console.error('Access logging failed:', error instanceof Error ? error.message : 'Unknown error');
  });

  return response;
};
